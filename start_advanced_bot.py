from advanced_job_bot import AdvancedJobBot

print("🚀 Starting ADVANCED AI Job Bot - NEXT GENERATION!")
print("=" * 80)
print("🤖 AI-POWERED FEATURES:")
print("   • 🧠 Intelligent Job Priority Scoring")
print("   • 📊 Comprehensive Analytics & Reporting")
print("   • 🔄 Failed Application Retry System")
print("   • ⏰ Smart Time-Based Delays")
print("   • 🕵️ Advanced Stealth Browser Mode")
print("   • 📝 Company-Specific Cover Letters")
print("   • 📸 Enhanced Screenshots with Metadata")
print("   • 📅 Automatic Scheduling (3x daily)")
print("")
print("🎯 INTELLIGENT PRIORITY SYSTEM:")
print("   • Senior/Lead/Principal roles: +3 points")
print("   • DevOps/AWS/Kubernetes: +2 points")
print("   • FAANG companies: +5 points")
print("   • Remote work: +2 points")
print("   • Platform reputation scoring")
print("")
print("📊 ANALYTICS & TRACKING:")
print("   • Total applications counter")
print("   • Applications by platform/date/company")
print("   • Success rate tracking")
print("   • Top companies and job titles")
print("   • Daily/weekly/monthly reports")
print("")
print("🔄 FAILURE RECOVERY:")
print("   • Automatic retry of failed applications")
print("   • Failed application tracking")
print("   • Smart error handling")
print("   • Persistent failure logs")
print("")
print("⏰ INTELLIGENT TIMING:")
print("   • Business hours: Slower delays (15-25 sec)")
print("   • Evening hours: Normal delays (10-20 sec)")
print("   • Night/early morning: Faster delays (8-15 sec)")
print("   • Random variance for human-like behavior")
print("")
print("🕵️ ADVANCED STEALTH MODE:")
print("   • Random user agents")
print("   • Anti-detection measures")
print("   • Webdriver property hiding")
print("   • Human-like browsing patterns")
print("")
print("📝 SMART COVER LETTERS:")
print("   • Company-specific insights")
print("   • Google: 'innovative approach to cloud computing and AI'")
print("   • Amazon: 'leadership in cloud infrastructure'")
print("   • Microsoft: 'enterprise solutions and cloud innovation'")
print("   • Netflix: 'streaming technology and microservices'")
print("   • Tesla: 'sustainable technology revolution'")
print("")
print("📸 ENHANCED PROOF SYSTEM:")
print("   • Screenshots with metadata files")
print("   • URL and page title recording")
print("   • Timestamp and job details")
print("   • Organized proof folder structure")
print("")
print("📅 AUTOMATIC SCHEDULING:")
print("   • 9:00 AM - Morning application cycle")
print("   • 2:00 PM - Afternoon application cycle")
print("   • 7:00 PM - Evening application cycle")
print("   • 11:00 PM - Daily report generation")
print("")
print("📊 FILES GENERATED:")
print("   • applied_jobs_history.pkl - Persistent job history")
print("   • bot_statistics.json - Comprehensive analytics")
print("   • failed_applications.pkl - Retry queue")
print("   • logs/job_bot.log - Detailed application logs")
print("   • logs/daily_report_YYYY-MM-DD.txt - Daily reports")
print("   • application_proofs/*.png - Screenshot proofs")
print("   • application_proofs/*_metadata.json - Proof metadata")
print("")
print("🎯 EXPECTED PERFORMANCE:")
print("   • 50+ applications per cycle")
print("   • 150+ applications per day (3 cycles)")
print("   • 0% duplicate applications")
print("   • Priority-sorted job applications")
print("   • Intelligent failure recovery")
print("   • Comprehensive tracking and analytics")
print("")
print("=" * 80)
print("🚀 LAUNCHING ADVANCED AI JOB BOT...")
print("")

# Ask user for mode selection
print("🔧 SELECT OPERATION MODE:")
print("   1. Single Cycle (run once)")
print("   2. Smart Scheduling (automatic 3x daily)")
print("   3. Generate Report Only")
print("")

try:
    choice = input("Enter your choice (1-3): ").strip()
    
    bot = AdvancedJobBot()
    
    if choice == "1":
        print("🚀 Running single advanced cycle...")
        bot.run_advanced_cycle()
    elif choice == "2":
        print("📅 Starting smart scheduling mode...")
        print("⚠️ Bot will run automatically at 9 AM, 2 PM, and 7 PM daily")
        print("📊 Daily reports generated at 11 PM")
        print("⌨️ Press Ctrl+C to stop")
        bot.schedule_smart_applications()
    elif choice == "3":
        print("📊 Generating daily report...")
        bot.generate_daily_report()
    else:
        print("❌ Invalid choice. Running single cycle...")
        bot.run_advanced_cycle()
        
except KeyboardInterrupt:
    print("\n🛑 Advanced job bot stopped by user")
except Exception as e:
    print(f"\n❌ Error: {e}")
    print("🔄 Running single cycle as fallback...")
    bot = AdvancedJobBot()
    bot.run_advanced_cycle()
